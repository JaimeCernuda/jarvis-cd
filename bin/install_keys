#!/usr/bin/env python3

"""
install_keys --key [key_name] --src_key_dir [path] --dst_key_dir [path] --user [username] --port [port] --hosts [hostfile.txt] --host [host-ip] --priv_key [True/False]

Ensure that current host trusts all other hosts
Ensure that all hosts have public key.
If provided, ensure that all hosts have private key
"""

import sys,os
import argparse
from jarvis_cd.hostfile import Hostfile
from jarvis_cd.basic.exec_node import ExecNode
from jarvis_cd.comm.ssh_node import SSHNode
from jarvis_cd.comm.scp_node import SCPNode

class ArgumentParser(object):
    __instance = None

    @staticmethod
    def GetInstance():
        """ Static access method. """
        if ArgumentParser.__instance is None:
            ArgumentParser()
        return ArgumentParser.__instance

    def __init__(self):
        super().__init__()
        """ Virtually private constructor. """
        if ArgumentParser.__instance is not None:
            raise Exception("This class is a singleton!")
        else:
            ArgumentParser.__instance = self
        self.parser = argparse.ArgumentParser(description='Bootstrap SSH')
        self.parser.add_argument("--key", metavar='name', default='id_rsa', type=str,
                                 help="The name of the public/private key pair within the src_key_dir")
        self.parser.add_argument("--port", metavar='port', default=22, type=str,
                                 help="The port number for ssh")
        self.parser.add_argument("--user", metavar='username', default=os.environ['USER'], type=str,
                                 help="The username for ssh")
        self.parser.add_argument("--hosts", metavar='hostfile.txt', default=None, type=str,
                                 help="The set of all hosts to bootstrap")
        self.parser.add_argument("--host", metavar='ip_addr', default=None, type=str,
                                 help="The single host to bootstrap")
        self.parser.add_argument("--src_key_dir", metavar='path', default=None, type=str,
                                 help="Where to search for key pair on the current host")
        self.parser.add_argument("--dst_key_dir", metavar='path', default=None, type=str,
                                 help="Where to install key pair on destination hosts")
        self.parser.add_argument("--priv_key", metavar='bool', default=False, type=bool,
                                 help="Whether or not to install private key on hosts")
        self.args = self.parser.parse_args()
        self._validate()

    def _validate(self):
        if self.args.hosts is None and self.args.host is None:
            print("Must provide either --hosts or --host")
            self.parser.print_help()
            exit(1)

def TrustHosts(username, port, hosts):
    #Ensure all hosts are trusted on this machine
    print("Connect to all hosts")
    for host in hosts:
        ExecNode('trust nodes', f'ssh -p {port} {username}@{host} echo init').Run()

def InstallKeys(username, src_key_dir, dst_key_dir, key_name, port, hosts, do_priv_key):
    print("Install SSH keys")

    src_pub_key = f'{src_key_dir}/{key_name}.pub'
    src_priv_key = f'{src_key_dir}/{key_name}'
    dst_pub_key = f'{dst_key_dir}/{key_name}.pub'
    dst_priv_key = f'{dst_key_dir}/{key_name}'

    #Ensure pubkey trusted on all nodes
    for host in hosts:
        ExecNode('Install public key', f'ssh-copy-id -f -i {src_key_dir}/{key_name} -p {port} {username}@{host}',
                 collect_output=False).Run()
    #Create SSH directory on all nodes
    SSHNode('Make SSH directory', hosts, f'mkdir {dst_key_dir}', pkey=src_priv_key, username=username, port=port, collect_output=False).Run()

    #Copy the keys
    SCPNode('Copy public key to hosts', hosts, src_pub_key, dst_pub_key, pkey=src_priv_key, username=username, port=port,
             collect_output=False).Run()
    if do_priv_key:
        SCPNode('Copy private key to hosts', hosts, src_priv_key, dst_priv_key, pkey=src_priv_key, username=username, port=port,
                collect_output=False).Run()

def _SSHPermissionsCmd(key_dir, key_name):
    commands = [
        f'chmod 700 {key_dir}',
        f'chmod 644 {key_dir}/{key_name}.pub',
        f'chmod 600 {key_dir}/{key_name}',
        f'chmod 600 {key_dir}/authorized_keys',
        f'chmod 644 {key_dir}/known_hosts',
        f'chmod 600 {key_dir}/config',
    ]
    return commands

def SSHPermissions(username, src_key_dir, dst_key_dir, key_name, port, hosts):
    src_priv_key = f'{src_key_dir}/{key_name}'
    src_cmd = _SSHPermissionsCmd(src_key_dir, key_name)
    dst_cmd = _SSHPermissionsCmd(dst_key_dir, key_name)
    ExecNode('Set permissions locally', src_cmd, collect_output=False).Run()
    SSHNode('Set permissions on destination', hosts, dst_cmd, pkey=src_priv_key, username=username, port=port, collect_output=False).Run()

if __name__ == '__main__':
    arguments = ArgumentParser.GetInstance()
    hosts = []
    if arguments.args.hosts is not None:
        hosts = Hostfile.LoadHostfile(arguments.args.hostfile).list()
    if arguments.args.host is not None:
        hosts.append(arguments.args.host)
    if arguments.args.src_key_dir is None:
        arguments.args.src_key_dir = os.path.join(os.environ['HOME'], '.ssh')
    if arguments.args.dst_key_dir is None:
        arguments.args.dst_key_dir = f'/home/{arguments.args.user}/.ssh'

    username = arguments.args.user
    port = arguments.args.port
    src_key_dir = arguments.args.src_key_dir
    dst_key_dir = arguments.args.dst_key_dir
    key_name = arguments.args.key
    do_priv_key = arguments.args.priv_key

    TrustHosts(username, port, hosts)
    InstallKeys(username, src_key_dir, dst_key_dir, key_name, port, hosts, do_priv_key)
    SSHPermissions(username, src_key_dir, dst_key_dir, key_name, port, hosts)