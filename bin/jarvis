#!/usr/bin/env python3

from jarvis_cd.jarvis_manager import JarvisManager
import argparse
from jarvis_cd.exception import Error,ErrorCode
from jarvis_cd.util.naming import ToCamelCase
import sys

def BasicArgs():
    parser = argparse.ArgumentParser(description='Jarvis CD')
    parser.add_argument("launcher", metavar='launcher', type=str,
                             help="The launcher for a program")
    parser.add_argument("operation", metavar='operation', type=str,
                             help="Operation for the launcher (e.g., start)")
    parser.add_argument("-C", dest='scaffold', metavar='directory', type=str,
                        help="The directory containing all launcher configurations")

    #Only check the first 3 params
    args = sys.argv[1:3]
    other_args = sys.argv[3:]

    #Add -C to the basic argparse if it exists
    for i, param in enumerate(other_args):
        if param == '-C':
            scaffold_dir = other_args[i+1]
            args += ['-C', scaffold_dir]
            other_args.remove('-C')
            other_args.remove(scaffold_dir)
            break

    args = parser.parse_args(args)
    return args,other_args

if __name__ == '__main__':
    #Load the arguments
    args,other_args = BasicArgs()
    jarvis_manager = JarvisManager.GetInstance()

    #Load the Jarvis CD launcher module
    launcher_module_name = str(args.launcher)
    launcher_class_name = ToCamelCase(launcher_module_name)
    launcher_class = jarvis_manager.GetLauncherClass(launcher_module_name, launcher_class_name)
    if launcher_class is None:
        raise Error(ErrorCode.LAUNCHER_NOT_FOUND).format(launcher_module_name)

    #Create the launcher instance and load configuration
    scaffold_dir = args.scaffold
    launcher_instance = launcher_class(scaffold_dir)

    #Load the launcher operation
    launcher_op_name = ToCamelCase(str(args.operation))
    launcher_op = getattr(launcher_class, launcher_op_name)

    #Load configuration if not scaffolding
    if launcher_op_name != 'Scaffold':
        launcher_instance.LoadConfig()
        if not launcher_instance.is_scaffolded:
            print(f"No configuration file found when calling {launcher_class_name}.{launcher_op_name}.")
            print("Are you cd'd into a directory that contains a jarvis_conf.yaml?")
            print("Alternatively, did you provide the correct path to -C?")
            print(f"jarvis_conf.yaml is produced after calling jarvis {launcher_class_name} scaffold")
            exit(1)

    #Get the arguments for the operation
    launcher_op_args = f"_{launcher_op_name}Args"
    parser = argparse.ArgumentParser(description=f"{launcher_class_name}: {launcher_op_name}")
    parser.prog = f"{launcher_class_name}.{launcher_op_name}()"
    if hasattr(launcher_instance, launcher_op_args):
        launcher_argparse = getattr(launcher_instance, launcher_op_args)
        launcher_argparse(parser)
    launcher_args = vars(parser.parse_args(other_args))

    #Call the operation
    result = launcher_op(launcher_instance, **launcher_args)
